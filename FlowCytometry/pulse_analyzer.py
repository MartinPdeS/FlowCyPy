import numpy as np
from scipy.signal import find_peaks, peak_widths




class PulseAnalyzer:
    """
    A class to analyze pulse signals generated by a flow cytometer, extracting features
    such as pulse height, width, and area.

    Attributes
    ----------
    signal : numpy.ndarray
        The raw signal to be analyzed (e.g., FSC or SSC signal).
    height_threshold : float
        The minimum height required for a peak to be considered significant.
    peaks : numpy.ndarray or None
        The indices of the detected peaks in the signal.
    heights : numpy.ndarray or None
        The heights of the detected peaks.
    widths : numpy.ndarray or None
        The widths of the detected peaks at half maximum.
    areas : list or None
        The areas under the detected peaks.

    Methods
    -------
    find_peaks():
        Detects peaks in the raw signal based on the height threshold.
    calculate_widths():
        Calculates the widths of the detected peaks at half maximum.
    calculate_areas():
        Calculates the areas under the detected peaks.
    display_features():
        Displays the extracted features such as heights, widths, and areas.

    Equations
    ---------
    The pulse height is simply the maximum amplitude of the pulse:

        height = max(signal(t))

    The pulse width is calculated at half maximum using:

        width = t2 - t1

    where t1 and t2 are the times at which the signal amplitude is half of the peak height.

    The pulse area is calculated by integrating the signal over the width of the pulse:

        area = âˆ«(signal(t) dt) from t1 to t2
    """

    def __init__(self, signal, height_threshold):
        """
        Constructs all the necessary attributes for the PulseAnalyzer object.

        Parameters
        ----------
        signal : numpy.ndarray
            The raw signal to be analyzed (e.g., FSC or SSC signal).
        height_threshold : float
            The minimum height required for a peak to be considered significant.
        """
        self.signal = signal
        self.height_threshold = height_threshold
        self.peaks = None
        self.heights = None
        self.widths = None
        self.areas = None

    def find_peaks(self):
        """
        Detects peaks in the raw signal based on the height threshold.
        """
        self.peaks, _ = find_peaks(self.signal, height=self.height_threshold)
        self.heights = self.signal[self.peaks]

    def calculate_widths(self):
        """
        Calculates the widths of the detected peaks at half maximum.
        """
        if self.peaks is not None:
            self.widths = peak_widths(self.signal, self.peaks, rel_height=0.5)[0]

    def calculate_areas(self):
        """
        Calculates the areas under the detected peaks.

        The area is calculated by integrating the signal around each detected peak.
        """
        if self.peaks is not None and self.widths is not None:
            self.areas = [
                np.sum(self.signal[int(peak - width/2):int(peak + width/2)])
                for peak, width in zip(self.peaks, self.widths)
            ]

    def display_features(self):
        """
        Displays the extracted features such as heights, widths, and areas.
        """
        print("Heights:", self.heights[:5])
        print("Widths:", self.widths[:5])
        print("Areas:", self.areas[:5])
