
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/plot_density_plot.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_plot_density_plot.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_plot_density_plot.py:


Flow Cytometry Simulation [2 populations] Density Plot of Scattering Intensities
================================================================================

This example simulates a flow cytometer experiment using the FlowCyPy library,
analyzes pulse signals from two detectors, and generates a 2D density plot of the scattering intensities.

Steps:
1. Set flow parameters and particle size distributions.
2. Set up the laser source and detectors.
3. Simulate the flow cytometry experiment.
4. Analyze pulse signals and generate a 2D density plot.

.. GENERATED FROM PYTHON SOURCE LINES 14-35

.. code-block:: python3


    # Import necessary libraries and modules
    import numpy as np
    from FlowCyPy import FlowCytometer, Scatterer, Analyzer, Detector, Source, FlowCell
    from FlowCyPy import distribution
    from FlowCyPy import peak_finder
    from FlowCyPy.units import (
        microsecond, micrometer, meter, refractive_index_unit, milliliter, second, millivolt,
        millisecond, nanometer, milliwatt, degree, volt, watt, megahertz, particle, ampere
    )

    # Set random seed for reproducibility
    np.random.seed(3)

    # Step 1: Define Flow Parameters
    flow_cell = FlowCell(
        flow_speed=7.56 * meter / second,        # Flow speed: 7.56 meters per second
        flow_area=(10 * micrometer) ** 2,        # Flow area: 10 x 10 micrometers
        total_time=0.5 * millisecond             # Total simulation time: 0.3 milliseconds
    )








.. GENERATED FROM PYTHON SOURCE LINES 36-37

Step 2: Create Populations (Extracellular Vesicles and Liposomes)

.. GENERATED FROM PYTHON SOURCE LINES 37-61

.. code-block:: python3

    scatterer = Scatterer(medium_refractive_index=1.33)

    scatterer.add_population(
        name='EV',
        concentration=1e+9 * particle / milliliter,
        size=distribution.RosinRammler(characteristic_size=50 * nanometer, spread=4.5),
        refractive_index=distribution.Normal(mean=1.39 * refractive_index_unit, std_dev=0.05 * refractive_index_unit)
    )


    scatterer.add_population(
        name='LP',
        concentration=1e+9 * particle / milliliter,
        size=distribution.RosinRammler(characteristic_size=200 * nanometer, spread=4.5),
        refractive_index=distribution.Normal(mean=1.45 * refractive_index_unit, std_dev=0.05 * refractive_index_unit)
    )

    scatterer.initialize(flow_cell=flow_cell)

    scatterer.print_properties()

    # Plot scatterer distribution
    scatterer.plot()




.. image-sg:: /gallery/images/sphx_glr_plot_density_plot_001.png
   :alt: plot density plot
   :srcset: /gallery/images/sphx_glr_plot_density_plot_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Scatterer [] Properties
    +-------------------------+---------+
    | Property                | Value   |
    +=========================+=========+
    | Coupling factor         | mie     |
    +-------------------------+---------+
    | Medium refractive index | 1.33    |
    +-------------------------+---------+




.. GENERATED FROM PYTHON SOURCE LINES 62-63

Step 4: Set up the Laser Source

.. GENERATED FROM PYTHON SOURCE LINES 63-106

.. code-block:: python3

    source = Source(
        numerical_aperture=0.3,                  # Numerical aperture of the laser: 0.2
        wavelength=200 * nanometer,              # Laser wavelength: 800 nanometers
        optical_power=100 * milliwatt            # Laser optical power: 20 milliwatts
    )

    # Step 5: Configure Detectors
    detector_0 = Detector(
        name='side',                             # Detector name: Side scatter detector
        phi_angle=90 * degree,                   # Angle: 90 degrees (Side Scatter)
        numerical_aperture=1.2,                  # Numerical aperture: 1.2
        responsitivity=1 * ampere / watt,        # Responsitivity: 1 volt per watt
        sampling_freq=60 * megahertz,            # Sampling frequency: 10 MHz
        noise_level=0.0 * volt,                  # Noise level: 0 volts
        saturation_level=0.1 * volt,             # Saturation level: 100 volts
        n_bins='14bit'                           # Discretization bins: 14-bit resolution
    )

    detector_1 = Detector(
        name='forward',                          # Detector name: Forward scatter detector
        phi_angle=180 * degree,                  # Angle: 180 degrees (Forward Scatter)
        numerical_aperture=1.2,                  # Numerical aperture: 1.2
        responsitivity=1 * ampere / watt,        # Responsitivity: 1 volt per watt
        sampling_freq=60 * megahertz,            # Sampling frequency: 10 MHz
        noise_level=0.0 * volt,                  # Noise level: 0 volts
        saturation_level=100 * millivolt,        # Saturation level: 100 volts
        n_bins='14bit'                           # Discretization bins: 14-bit resolution
    )

    # Step 6: Simulate Flow Cytometry Experiment
    cytometer = FlowCytometer(
        coupling_mechanism='mie',                # Use Mie scattering for particle simulation
        source=source,                           # Laser source
        scatterer=scatterer, # Particle size and refractive index distribution
        detectors=[detector_0, detector_1]       # Two detectors: Side scatter and Forward scatter
    )

    # Run the simulation
    cytometer.simulate_pulse()

    # Plot the results of scattering signals from both detectors
    # cytometer.plot()








.. GENERATED FROM PYTHON SOURCE LINES 107-108

Step 7: Analyze Pulse Signals

.. GENERATED FROM PYTHON SOURCE LINES 108-123

.. code-block:: python3

    algorithm = peak_finder.MovingAverage(
        threshold=0.1 * millivolt,
        window_size=1 * microsecond,
        min_peak_distance=0.3 * microsecond

    )

    analyzer = Analyzer(cytometer=cytometer, algorithm=algorithm)

    # Analyze pulse signals
    analyzer.run_analysis(compute_peak_area=False)  # Analysis with no peak area computation

    # Plot the analyzed pulse signals
    analyzer.plot_peak()




.. image-sg:: /gallery/images/sphx_glr_plot_density_plot_002.png
   :alt: plot density plot
   :srcset: /gallery/images/sphx_glr_plot_density_plot_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 124-125

Step 8: Extract and Plot Coincidence Data

.. GENERATED FROM PYTHON SOURCE LINES 125-129

.. code-block:: python3

    analyzer.get_coincidence(margin=1e-9 * microsecond)

    # Plot the 2D density plot
    analyzer.plot(log_plot=True)



.. image-sg:: /gallery/images/sphx_glr_plot_density_plot_003.png
   :alt: plot density plot
   :srcset: /gallery/images/sphx_glr_plot_density_plot_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.865 seconds)


.. _sphx_glr_download_gallery_plot_density_plot.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_density_plot.py <plot_density_plot.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_density_plot.ipynb <plot_density_plot.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
