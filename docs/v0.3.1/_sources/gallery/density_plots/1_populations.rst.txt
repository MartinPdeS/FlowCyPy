
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/density_plots/1_populations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_density_plots_1_populations.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_density_plots_1_populations.py:


Flow Cytometry Simulation with One Populations: Density Plot of Scattering Intensities
======================================================================================

This example demonstrates how to simulate a flow cytometry experiment using the FlowCyPy library.
The simulation includes one populations of particles, and we analyze pulse signals from two detectors
to generate a 2D density plot of scattering intensities.

Workflow Summary:
1. Flow Setup: Configure flow parameters and define particle size distributions.
2. Laser GaussianBeam and Detector Setup: Define the laser source characteristics and configure the forward and side detectors.
3. Run the Experiment: Simulate the flow cytometry experiment.
4. Data Analysis: Analyze the pulse signals and generate a 2D density plot of the scattering intensities.

.. GENERATED FROM PYTHON SOURCE LINES 15-113

.. code-block:: Python


    # Step 1: Configuring Flow Parameters
    import numpy as np
    from FlowCyPy import FlowCell
    from FlowCyPy.units import meter, micrometer, millisecond, second, degree
    from FlowCyPy import Scatterer, distribution
    from FlowCyPy.units import particle, milliliter, nanometer, RIU, AU, milliwatt
    from FlowCyPy import FlowCytometer
    from FlowCyPy.units import ohm, megahertz, ampere, volt, kelvin, watt, microvolt, microsecond
    from FlowCyPy.detector import Detector
    from FlowCyPy import Analyzer, peak_finder
    from FlowCyPy import GaussianBeam
    from FlowCyPy import NoiseSetting

    NoiseSetting.include_noises = False

    np.random.seed(3)  # Ensure reproducibility

    # Define the flow cell parameters
    flow_cell = FlowCell(
        flow_speed=7.56 * meter / second,        # Flow speed: 7.56 m/s
        flow_area=(10 * micrometer) ** 2,        # Flow area: 10 x 10 µm²
        run_time=0.1 * millisecond               # Simulation run time: 0.5 ms
    )

    # Initialize scatterer with a medium refractive index
    scatterer = Scatterer(medium_refractive_index=1.33 * RIU)  # Medium refractive index of 1.33 (water)

    # Define populations with size distribution and refractive index
    scatterer.add_population(
        name='EV',  # Population name: Extracellular Vesicles
        concentration=1e9 * particle / milliliter,  # Concentration: 1e9 particles/milliliter
        size=distribution.RosinRammler(
            characteristic_size=50 * nanometer,  # Characteristic size: 50 nm
            spread=4.5                           # Spread factor for the distribution
        ),
        refractive_index=distribution.Normal(
            mean=1.39 * RIU,    # Mean refractive index: 1.39
            std_dev=0.02 * RIU  # Standard deviation: 0.02 refractive index units
        )
    )

    scatterer.initialize(flow_cell=flow_cell)  # Link populations to flow cell
    scatterer.print_properties()               # Display population properties
    scatterer.plot()                         # Visualize the population distributions

    # Set up the laser source parameters
    source = GaussianBeam(
        numerical_aperture=0.3 * AU,          # Laser numerical aperture: 0.3
        wavelength=200 * nanometer,           # Laser wavelength: 200 nm
        optical_power=100 * milliwatt         # Laser optical power: 20 mW
    )

    # Add forward scatter detector
    detector_0 = Detector(
        name='forward',                         # Detector name: Forward scatter
        phi_angle=0 * degree,                   # Detector angle: 0 degrees (forward scatter)
        numerical_aperture=1.2 * AU,            # Detector numerical aperture: 1.2
        responsitivity=1 * ampere / watt,       # Responsitivity: 1 A/W (detector response)
        sampling_freq=60 * megahertz,           # Sampling frequency: 60 MHz
        noise_level=0.0 * volt,                 # Noise level: 0 V
        saturation_level=2000 * microvolt,      # Saturation level: 5000 mV (detector capacity)
        resistance=50 * ohm,                    # Resistance: 50 ohm
        temperature=300 * kelvin,               # Operating temperature: 300 K (room temperature)
        n_bins='14bit'                          # Discretization bins: 14-bit resolution
    )

    # Add side scatter detector
    detector_1 = Detector(
        name='side',                            # Detector name: Side scatter
        phi_angle=90 * degree,                  # Detector angle: 90 degrees (side scatter)
        numerical_aperture=1.2 * AU,            # Detector numerical aperture: 1.2
        responsitivity=1 * ampere / watt,       # Responsitivity: 1 A/W (detector response)
        sampling_freq=60 * megahertz,           # Sampling frequency: 60 MHz
        noise_level=0.0 * volt,                 # Noise level: 0 V
        saturation_level=2000 * microvolt,      # Saturation level: 5 V (detector capacity)
        resistance=50 * ohm,                    # Resistance: 50 ohm
        temperature=300 * kelvin,               # Operating temperature: 300 K (room temperature)
        n_bins='14bit'                          # Discretization bins: 14-bit resolution
    )


    # Step 4: Simulating the Flow Cytometry Experiment
    cytometer = FlowCytometer(
        coupling_mechanism='mie',
        source=source,
        detectors=[detector_0, detector_1],
        scatterer=scatterer,
        background_power=0.001 * milliwatt
    )


    # Run the flow cytometry simulation
    cytometer.simulate_pulse()

    # Visualize the scatter signals from both detectors
    cytometer.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/density_plots/images/sphx_glr_1_populations_001.png
         :alt: 1 populations
         :srcset: /gallery/density_plots/images/sphx_glr_1_populations_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/density_plots/images/sphx_glr_1_populations_002.png
         :alt: 1 populations
         :srcset: /gallery/density_plots/images/sphx_glr_1_populations_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Scatterer [] Properties
    +-----------------------------+---------+
    | Property                    | Value   |
    +=============================+=========+
    | coupling factor             | mie     |
    +-----------------------------+---------+
    | medium refractive index     | 1.3 RIU |
    +-----------------------------+---------+
    | minimum time between events | 32.1 ns |
    +-----------------------------+---------+
    | average time between events | 1.1 µs  |
    +-----------------------------+---------+

    Population [EV] Properties
    +------------------+------------------------------+
    | Property         | Value                        |
    +==================+==============================+
    | Name             | EV                           |
    +------------------+------------------------------+
    | Refractive Index | Normal(1.390 RIU, 0.020 RIU) |
    +------------------+------------------------------+
    | Size             | RR(50.000 nm, 4.500)         |
    +------------------+------------------------------+
    | Concentration    | 1.7 nmol/m³                  |
    +------------------+------------------------------+
    | N events         | 76.0 particle                |
    +------------------+------------------------------+
    /opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/FlowCyPy/cytometer.py:186: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
      ax.legend()




.. GENERATED FROM PYTHON SOURCE LINES 114-115

Step 5: Analyzing Pulse Signals

.. GENERATED FROM PYTHON SOURCE LINES 115-130

.. code-block:: Python

    algorithm = peak_finder.MovingAverage(
        threshold=10 * microvolt,           # Signal threshold: 0.1 mV
        window_size=1 * microsecond,         # Moving average window size: 1 µs
        min_peak_distance=0.3 * microsecond  # Minimum distance between peaks: 0.3 µs
    )

    # Initialize analyzer with the cytometer and algorithm
    analyzer = Analyzer(cytometer=cytometer, algorithm=algorithm)

    # Run the pulse signal analysis
    analyzer.run_analysis(compute_peak_area=False)

    # Plot the detected peaks
    analyzer.plot_peak()




.. image-sg:: /gallery/density_plots/images/sphx_glr_1_populations_003.png
   :alt: 1 populations
   :srcset: /gallery/density_plots/images/sphx_glr_1_populations_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Step 6: Coincidence Data and 2D Density Plot
Extract coincidence data within a defined margin

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: Python

    analyzer.get_coincidence(margin=1e-9 * microsecond)

    # Generate and plot the 2D density plot of scattering intensities
    analyzer.plot(log_plot=True)



.. image-sg:: /gallery/density_plots/images/sphx_glr_1_populations_004.png
   :alt: 1 populations
   :srcset: /gallery/density_plots/images/sphx_glr_1_populations_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.541 seconds)


.. _sphx_glr_download_gallery_density_plots_1_populations.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 1_populations.ipynb <1_populations.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 1_populations.py <1_populations.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 1_populations.zip <1_populations.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
