
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/validation/j_estimator.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_validation_j_estimator.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_validation_j_estimator.py:


J Estimator Validation â€” Fixed Bead Size, Variable Illumination
=================================================================

This example demonstrates how to estimate the `J` parameter, which quantifies
how the relative noise (robust coefficient of variation) scales with the
signal strength under varying illumination power. We simulate a flow cytometry
system with fixed bead diameter and varying illumination.

.. GENERATED FROM PYTHON SOURCE LINES 13-15

Setup and configuration
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 15-27

.. code-block:: Python


    import numpy as np
    from FlowCyPy import units, NoiseSetting
    from FlowCyPy import GaussianBeam
    from FlowCyPy.flow_cell import FlowCell
    from FlowCyPy import ScattererCollection
    from FlowCyPy.detector import Detector
    from FlowCyPy.signal_digitizer import SignalDigitizer
    from FlowCyPy.amplifier import TransimpedanceAmplifier
    from FlowCyPy import FlowCytometer, OptoElectronics, Fluidics
    from FlowCyPy.calibration import JEstimator








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Configure simulation-level noise assumptions

.. GENERATED FROM PYTHON SOURCE LINES 29-41

.. code-block:: Python


    NoiseSetting.include_noises = True
    NoiseSetting.include_shot_noise = True
    NoiseSetting.include_dark_current_noise = False
    NoiseSetting.include_source_noise = False
    NoiseSetting.include_amplifier_noise = False
    NoiseSetting.assume_perfect_hydrodynamic_focusing = True
    NoiseSetting.assume_amplifier_bandwidth_is_infinite = True
    NoiseSetting.assume_perfect_digitizer = True

    np.random.seed(3)  # Reproducibility








.. GENERATED FROM PYTHON SOURCE LINES 42-44

Construct simulation components
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 44-98

.. code-block:: Python


    flow_cell = FlowCell(
        sample_volume_flow=80 * units.microliter / units.minute,
        sheath_volume_flow=1 * units.milliliter / units.minute,
        width=400 * units.micrometer,
        height=400 * units.micrometer,
        event_scheme='sequential-uniform'
    )

    scatterer_collection = ScattererCollection(medium_refractive_index=1.33 * units.RIU)

    fluidics = Fluidics(
        scatterer_collection=scatterer_collection,
        flow_cell=flow_cell
    )

    source = GaussianBeam(
        numerical_aperture=0.2 * units.AU,
        wavelength=450 * units.nanometer,
        optical_power=0 * units.watt
    )

    digitizer = SignalDigitizer(
        bit_depth='16bit',
        saturation_levels=(0 * units.volt, 2 * units.volt),
        sampling_rate=60 * units.megahertz,
    )

    amplifier = TransimpedanceAmplifier(
        gain=10 * units.volt / units.ampere,
        bandwidth=60 * units.megahertz,
    )

    detector_0 = Detector(
        name='default',
        phi_angle=0 * units.degree,  # Forward scatter
        numerical_aperture=0.2 * units.AU,
        cache_numerical_aperture=0.0 * units.AU,
        responsivity=1 * units.ampere / units.watt,
    )

    opto_electronics = OptoElectronics(
        detectors=[detector_0],
        digitizer=digitizer,
        source=source,
        amplifier=amplifier
    )

    flow_cytometer = FlowCytometer(
        opto_electronics=opto_electronics,
        fluidics=fluidics,
        background_power=source.optical_power * 0.001
    )








.. GENERATED FROM PYTHON SOURCE LINES 99-101

Run J Estimation Simulation
---------------------------

.. GENERATED FROM PYTHON SOURCE LINES 101-111

.. code-block:: Python


    j_estimator = JEstimator(debug_mode=False)

    j_estimator.add_batch(
        illumination_powers=np.linspace(10, 380, 25) * units.milliwatt,
        bead_diameter=400 * units.nanometer,
        flow_cytometer=flow_cytometer,
        particle_count=50 * units.particle
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [INFO] Running simulation 1/25
    [INFO] Running simulation 2/25
    [INFO] Running simulation 3/25
    [INFO] Running simulation 4/25
    [INFO] Running simulation 5/25
    [INFO] Running simulation 6/25
    [INFO] Running simulation 7/25
    [INFO] Running simulation 8/25
    [INFO] Running simulation 9/25
    [INFO] Running simulation 10/25
    [INFO] Running simulation 11/25
    [INFO] Running simulation 12/25
    [INFO] Running simulation 13/25
    [INFO] Running simulation 14/25
    [INFO] Running simulation 15/25
    [INFO] Running simulation 16/25
    [INFO] Running simulation 17/25
    [INFO] Running simulation 18/25
    [INFO] Running simulation 19/25
    [INFO] Running simulation 20/25
    [INFO] Running simulation 21/25
    [INFO] Running simulation 22/25
    [INFO] Running simulation 23/25
    [INFO] Running simulation 24/25
    [INFO] Running simulation 25/25




.. GENERATED FROM PYTHON SOURCE LINES 112-114

Plot estimation and diagnostics
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 114-117

.. code-block:: Python


    j_estimator.plot()
    j_estimator.plot_statistics()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/validation/images/sphx_glr_j_estimator_001.png
         :alt: J Parameter Estimation
         :srcset: /gallery/validation/images/sphx_glr_j_estimator_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/validation/images/sphx_glr_j_estimator_002.png
         :alt: Median Signal vs Illumination Power, STD vs Illumination Power
         :srcset: /gallery/validation/images/sphx_glr_j_estimator_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 49.412 seconds)


.. _sphx_glr_download_gallery_validation_j_estimator.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: j_estimator.ipynb <j_estimator.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: j_estimator.py <j_estimator.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: j_estimator.zip <j_estimator.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
