
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/limit_of_detection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_tutorials_limit_of_detection.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_limit_of_detection.py:


Limit of Detection
==================

This example simulates the detection of small nanoparticles (90â€“150 nm diameter)
in a flow cytometry setup using a dual-detector configuration (side and forward scatter).
The simulation includes noise models, realistic fluidics, analog signal conditioning,
digitization, triggering, and peak detection.

The main goal is to evaluate whether such particles produce detectable and distinguishable
scatter signals in the presence of system noise and fluidic variability.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

.. code-block:: Python

    import numpy as np
    from FlowCyPy.fluidics import Fluidics, FlowCell, population, distribution, ScattererCollection
    from FlowCyPy.opto_electronics import OptoElectronics, source, TransimpedanceAmplifier, Detector
    from FlowCyPy.signal_processing import SignalProcessing, Digitizer, circuits, peak_locator, triggering_system
    from FlowCyPy import FlowCytometer, SimulationSettings, units








.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: Python

    SimulationSettings.include_noises = True
    SimulationSettings.include_shot_noise = True
    SimulationSettings.include_source_noise = True
    SimulationSettings.include_dark_current_noise = True
    SimulationSettings.assume_perfect_hydrodynamic_focusing = True
    SimulationSettings.evenly_spaced_events = True
    SimulationSettings.sorted_population = True

    np.random.seed(3)








.. GENERATED FROM PYTHON SOURCE LINES 33-39

.. code-block:: Python

    source = source.GaussianBeam(
        numerical_aperture=0.1 * units.AU,
        wavelength=488 * units.nanometer,
        optical_power=200 * units.milliwatt
    )








.. GENERATED FROM PYTHON SOURCE LINES 40-47

.. code-block:: Python

    flow_cell = FlowCell(
        sample_volume_flow=0.02 * units.microliter / units.second,
        sheath_volume_flow=0.1 * units.microliter / units.second,
        width=20 * units.micrometer,
        height=10 * units.micrometer,
    )








.. GENERATED FROM PYTHON SOURCE LINES 48-59

.. code-block:: Python

    scatterer_collection = ScattererCollection(medium_refractive_index=1.33 * units.RIU)

    for size in [150, 130, 110, 90]:
        pop = population.Sphere(
            name=f'{size} nm',
            particle_count=20 * units.particle,
            diameter=distribution.Delta(position=size * units.nanometer),
            refractive_index=distribution.Delta(position=1.39 * units.RIU)
        )
        scatterer_collection.add_population(pop)








.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: Python

    fluidics = Fluidics(
        scatterer_collection=scatterer_collection,
        flow_cell=flow_cell
    )








.. GENERATED FROM PYTHON SOURCE LINES 66-72

.. code-block:: Python

    digitizer = Digitizer(
        bit_depth='14bit',
        saturation_levels='auto',
        sampling_rate=60 * units.megahertz
    )








.. GENERATED FROM PYTHON SOURCE LINES 73-89

.. code-block:: Python

    detector_side = Detector(
        name='side',
        phi_angle=90 * units.degree,
        numerical_aperture=0.2 * units.AU,
        responsivity=1 * units.ampere / units.watt,
        dark_current=0.001 * units.milliampere
    )

    detector_forward = Detector(
        name='forward',
        phi_angle=0 * units.degree,
        numerical_aperture=0.2 * units.AU,
        responsivity=1 * units.ampere / units.watt,
        dark_current=0.001 * units.milliampere
    )








.. GENERATED FROM PYTHON SOURCE LINES 90-101

.. code-block:: Python

    amplifier = TransimpedanceAmplifier(
        gain=10000 * units.volt / units.ampere,
        bandwidth=10 * units.megahertz
    )

    opto_electronics = OptoElectronics(
        detectors=[detector_side, detector_forward],
        source=source,
        amplifier=amplifier
    )








.. GENERATED FROM PYTHON SOURCE LINES 102-107

.. code-block:: Python

    analog_processing = [
        circuits.BaselineRestorator(window_size=10 * units.microsecond),
        circuits.BesselLowPass(cutoff=1 * units.megahertz, order=4, gain=2)
    ]








.. GENERATED FROM PYTHON SOURCE LINES 108-123

.. code-block:: Python

    triggering_system = triggering_system.DynamicWindow(
        trigger_detector_name='forward',
        threshold=0.4 * units.millivolt,
        max_triggers=-1,
        pre_buffer=64,
        post_buffer=64
    )

    signal_processing = SignalProcessing(
        digitizer=digitizer,
        analog_processing=analog_processing,
        triggering_system=triggering_system,
        peak_algorithm=peak_locator.GlobalPeakLocator()
    )








.. GENERATED FROM PYTHON SOURCE LINES 124-133

.. code-block:: Python

    cytometer = FlowCytometer(
        opto_electronics=opto_electronics,
        fluidics=fluidics,
        signal_processing=signal_processing,
        background_power=0.0001 * units.milliwatt
    )

    results = cytometer.run(run_time=1.0 * units.millisecond)








.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: Python

    results.analog.normalize_units(time_units='max', signal_units='max')
    results.analog.plot()




.. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_001.png
   :alt: limit of detection
   :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x500 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 138-140

.. code-block:: Python

    results.triggered_analog.plot()




.. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_002.png
   :alt: limit of detection
   :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x500 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 141-145

.. code-block:: Python

    results.peaks.plot(
        x=('side', 'Height'),
        y=('forward', 'Height')
    )



.. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_003.png
   :alt: Peaks properties
   :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <seaborn.axisgrid.JointGrid object at 0x7fd0d1f26150>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.639 seconds)


.. _sphx_glr_download_gallery_tutorials_limit_of_detection.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: limit_of_detection.ipynb <limit_of_detection.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: limit_of_detection.py <limit_of_detection.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: limit_of_detection.zip <limit_of_detection.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
