
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_tutorials_workflow.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_workflow.py:


Flow Cytometry Simulation: Full System Example
==============================================

This tutorial demonstrates a complete flow cytometry simulation using the FlowCyPy library.
It models fluidics, optics, signal processing, and classification of multiple particle populations.

Steps Covered:
--------------
1. Configure simulation parameters and noise models
2. Define laser source, flow cell geometry, and fluidics
3. Add synthetic particle populations
4. Set up detectors, amplifier, and digitizer
5. Simulate analog and digital signal acquisition
6. Apply triggering and peak detection
7. Classify particle events based on peak features

.. GENERATED FROM PYTHON SOURCE LINES 20-22

Step 0: Global Settings and Imports
-----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 22-34

.. code-block:: Python

    import numpy as np
    from FlowCyPy import units, SimulationSettings

    SimulationSettings.include_noises = True
    SimulationSettings.include_shot_noise = True
    SimulationSettings.include_dark_current_noise = True
    SimulationSettings.include_source_noise = True
    SimulationSettings.include_amplifier_noise = True
    SimulationSettings.assume_perfect_hydrodynamic_focusing = True

    np.random.seed(3)








.. GENERATED FROM PYTHON SOURCE LINES 35-37

Step 1: Define Flow Cell and Fluidics
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 37-70

.. code-block:: Python

    from FlowCyPy.flow_cell import FlowCell
    from FlowCyPy.fluidics import Fluidics, ScattererCollection, population, distribution

    flow_cell = FlowCell(
        sample_volume_flow=80 * units.microliter / units.minute,
        sheath_volume_flow=1 * units.milliliter / units.minute,
        width=200 * units.micrometer,
        height=100 * units.micrometer
    )

    scatterer_collection = ScattererCollection(medium_refractive_index=1.33 * units.RIU)

    scatterer_collection.add_population(population.Sphere(
        name='Pop 0',
        particle_count=5e9 * units.particle / units.milliliter,
        diameter=distribution.RosinRammler(150 * units.nanometer, spread=30),
        refractive_index=distribution.Normal(1.44 * units.RIU, std_dev=0.002 * units.RIU)
    ))

    scatterer_collection.add_population(population.Sphere(
        name='Pop 1',
        particle_count=5e9 * units.particle / units.milliliter,
        diameter=distribution.RosinRammler(200 * units.nanometer, spread=30),
        refractive_index=distribution.Normal(1.44 * units.RIU, std_dev=0.002 * units.RIU)
    ))

    scatterer_collection.dilute(factor=80)

    fluidics = Fluidics(
        scatterer_collection=scatterer_collection,
        flow_cell=flow_cell
    )








.. GENERATED FROM PYTHON SOURCE LINES 71-73

Step 2: Define Optical Subsystem
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 73-101

.. code-block:: Python

    from FlowCyPy.opto_electronics import source, Detector, TransimpedanceAmplifier, OptoElectronics

    source = source.GaussianBeam(
        numerical_aperture=0.1 * units.AU,
        wavelength=450 * units.nanometer,
        optical_power=200 * units.milliwatt,
        RIN=-140
    )

    detectors = [
        Detector(name='forward', phi_angle=0 * units.degree,  numerical_aperture=0.3 * units.AU, responsivity=1 * units.ampere / units.watt),
        Detector(name='side',    phi_angle=90 * units.degree, numerical_aperture=0.3 * units.AU, responsivity=1 * units.ampere / units.watt),
        Detector(name='det 2',   phi_angle=30 * units.degree, numerical_aperture=0.3 * units.AU, responsivity=1 * units.ampere / units.watt),
    ]

    amplifier = TransimpedanceAmplifier(
        gain=10 * units.volt / units.ampere,
        bandwidth=10 * units.megahertz,
        voltage_noise_density=0.1 * units.nanovolt / units.sqrt_hertz,
        current_noise_density=0.2 * units.femtoampere / units.sqrt_hertz
    )

    opto_electronics = OptoElectronics(
        detectors=detectors,
        source=source,
        amplifier=amplifier
    )








.. GENERATED FROM PYTHON SOURCE LINES 102-104

Step 3: Signal Processing Configuration
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 104-134

.. code-block:: Python

    from FlowCyPy.signal_processing import SignalProcessing, Digitizer, circuits, peak_locator, triggering_system

    digitizer = Digitizer(
        bit_depth='14bit',
        saturation_levels='auto',
        sampling_rate=60 * units.megahertz
    )

    analog_processing = [
        circuits.BaselineRestorator(window_size=10 * units.microsecond),
        circuits.BesselLowPass(cutoff=2 * units.megahertz, order=4, gain=2)
    ]

    triggering = triggering_system.DynamicWindow(
        trigger_detector_name='forward',
        threshold=10 * units.microvolt,
        pre_buffer=20,
        post_buffer=20,
        max_triggers=-1
    )

    peak_algo = peak_locator.GlobalPeakLocator(compute_width=False)

    signal_processing = SignalProcessing(
        digitizer=digitizer,
        analog_processing=analog_processing,
        triggering_system=triggering,
        peak_algorithm=peak_algo
    )








.. GENERATED FROM PYTHON SOURCE LINES 135-137

Step 4: Run Simulation
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 137-148

.. code-block:: Python

    from FlowCyPy import FlowCytometer

    cytometer = FlowCytometer(
        opto_electronics=opto_electronics,
        fluidics=fluidics,
        signal_processing=signal_processing,
        background_power=0.001 * units.milliwatt
    )

    results = cytometer.run(run_time=0.8 * units.millisecond)








.. GENERATED FROM PYTHON SOURCE LINES 149-151

Step 5: Plot Events and Raw Analog Signals
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 151-154

.. code-block:: Python

    _ = results.events.plot(x='side', y='forward', z='RefractiveIndex')





.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_001.png
   :alt: Scatterer Sampling Distribution
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 155-157

Plot raw analog signals
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 157-160

.. code-block:: Python

    results.analog.normalize_units(signal_units='max')
    _ = results.analog.plot()




.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_002.png
   :alt: workflow
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 161-163

Step 6: Plot Triggered Analog Segments
--------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 163-165

.. code-block:: Python

    _ = results.triggered_analog.plot()




.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_003.png
   :alt: workflow
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-168

Step 7: Classify Events from Peak Features
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 168-182

.. code-block:: Python

    from FlowCyPy.classifier import KmeansClassifier

    classifier = KmeansClassifier(number_of_cluster=2)

    classified = classifier.run(
        dataframe=results.peaks.unstack('Detector'),
        features=['Height'],
        detectors=['side', 'forward']
    )

    _ = classified.plot(
        x=('side', 'Height'),
        y=('forward', 'Height')
    )



.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_004.png
   :alt: Event classification
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.798 seconds)


.. _sphx_glr_download_gallery_tutorials_workflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow.ipynb <workflow.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow.py <workflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow.zip <workflow.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
