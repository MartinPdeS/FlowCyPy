
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/limit_of_detection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_tutorials_limit_of_detection.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_limit_of_detection.py:


Limit of Detection
==================

This example simulates the detection of small nanoparticles (90–150 nm diameter)
in a flow cytometry setup using a dual-detector configuration (side and forward scatter).
The simulation includes noise models, realistic fluidics, analog signal conditioning,
digitization, triggering, and peak detection.

The main goal is to evaluate whether such particles produce detectable and distinguishable
scatter signals in the presence of system noise and fluidic variability.

.. GENERATED FROM PYTHON SOURCE LINES 15-22

.. code-block:: Python

    import numpy as np
    from FlowCyPy.fluidics import Fluidics, FlowCell, population, distribution, ScattererCollection
    from FlowCyPy.opto_electronics import OptoElectronics, source, TransimpedanceAmplifier, Detector
    from FlowCyPy.signal_processing import SignalProcessing, Digitizer, circuits, peak_locator, triggering_system
    from FlowCyPy import FlowCytometer, SimulationSettings
    from TypedUnit import ureg








.. GENERATED FROM PYTHON SOURCE LINES 23-24

Simulation Configuration

.. GENERATED FROM PYTHON SOURCE LINES 24-34

.. code-block:: Python

    SimulationSettings.include_noises = True
    SimulationSettings.include_shot_noise = True
    SimulationSettings.include_source_noise = True
    SimulationSettings.include_dark_current_noise = True
    SimulationSettings.assume_perfect_hydrodynamic_focusing = True
    SimulationSettings.evenly_spaced_events = True
    SimulationSettings.sorted_population = True

    np.random.seed(3)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Optical Source

.. GENERATED FROM PYTHON SOURCE LINES 36-42

.. code-block:: Python

    source = source.GaussianBeam(
        numerical_aperture=0.1 * ureg.AU,
        wavelength=488 * ureg.nanometer,
        optical_power=200 * ureg.milliwatt
    )








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Flow Cell Configuration

.. GENERATED FROM PYTHON SOURCE LINES 44-51

.. code-block:: Python

    flow_cell = FlowCell(
        sample_volume_flow=0.02 * ureg.microliter / ureg.second,
        sheath_volume_flow=0.1 * ureg.microliter / ureg.second,
        width=20 * ureg.micrometer,
        height=10 * ureg.micrometer,
    )








.. GENERATED FROM PYTHON SOURCE LINES 52-53

Define Scatterer Populations (90–150 nm spheres)

.. GENERATED FROM PYTHON SOURCE LINES 53-64

.. code-block:: Python

    scatterer_collection = ScattererCollection(medium_refractive_index=1.33 * ureg.RIU)

    for size in [150, 130, 110, 90]:
        pop = population.Sphere(
            name=f'{size} nm',
            particle_count=20 * ureg.particle,
            diameter=distribution.Delta(position=size * ureg.nanometer),
            refractive_index=distribution.Delta(position=1.39 * ureg.RIU)
        )
        scatterer_collection.add_population(pop)








.. GENERATED FROM PYTHON SOURCE LINES 65-66

Fluidics Subsystem

.. GENERATED FROM PYTHON SOURCE LINES 66-71

.. code-block:: Python

    fluidics = Fluidics(
        scatterer_collection=scatterer_collection,
        flow_cell=flow_cell
    )








.. GENERATED FROM PYTHON SOURCE LINES 72-73

Signal Digitizer

.. GENERATED FROM PYTHON SOURCE LINES 73-79

.. code-block:: Python

    digitizer = Digitizer(
        bit_depth='14bit',
        saturation_levels='auto',
        sampling_rate=60 * ureg.megahertz
    )








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Detectors

.. GENERATED FROM PYTHON SOURCE LINES 81-97

.. code-block:: Python

    detector_side = Detector(
        name='side',
        phi_angle=90 * ureg.degree,
        numerical_aperture=0.2 * ureg.AU,
        responsivity=1 * ureg.ampere / ureg.watt,
        dark_current=0.001 * ureg.milliampere
    )

    detector_forward = Detector(
        name='forward',
        phi_angle=0 * ureg.degree,
        numerical_aperture=0.2 * ureg.AU,
        responsivity=1 * ureg.ampere / ureg.watt,
        dark_current=0.001 * ureg.milliampere
    )








.. GENERATED FROM PYTHON SOURCE LINES 98-99

Amplifier and Opto-Electronics

.. GENERATED FROM PYTHON SOURCE LINES 99-110

.. code-block:: Python

    amplifier = TransimpedanceAmplifier(
        gain=10000 * ureg.volt / ureg.ampere,
        bandwidth=10 * ureg.megahertz
    )

    opto_electronics = OptoElectronics(
        detectors=[detector_side, detector_forward],
        source=source,
        amplifier=amplifier
    )








.. GENERATED FROM PYTHON SOURCE LINES 111-112

Analog Processing Pipeline

.. GENERATED FROM PYTHON SOURCE LINES 112-117

.. code-block:: Python

    analog_processing = [
        circuits.BaselineRestorator(window_size=10 * ureg.microsecond),
        circuits.BesselLowPass(cutoff=1 * ureg.megahertz, order=4, gain=2)
    ]








.. GENERATED FROM PYTHON SOURCE LINES 118-119

Triggering and Peak Detection

.. GENERATED FROM PYTHON SOURCE LINES 119-134

.. code-block:: Python

    triggering_system = triggering_system.DynamicWindow(
        trigger_detector_name='forward',
        threshold=0.4 * ureg.millivolt,
        max_triggers=-1,
        pre_buffer=64,
        post_buffer=64
    )

    signal_processing = SignalProcessing(
        digitizer=digitizer,
        analog_processing=analog_processing,
        triggering_system=triggering_system,
        peak_algorithm=peak_locator.GlobalPeakLocator()
    )








.. GENERATED FROM PYTHON SOURCE LINES 135-144

.. code-block:: Python

    cytometer = FlowCytometer(
        opto_electronics=opto_electronics,
        fluidics=fluidics,
        signal_processing=signal_processing,
        background_power=0.0001 * ureg.milliwatt
    )

    results = cytometer.run(run_time=1.0 * ureg.millisecond)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Population  ScattererID
    150 nm      0               0.0
                1               0.0
                2              -0.0
                3              -0.0
                4               0.0
                               ... 
    90 nm       10              0.0
                11              0.0
                12             -0.0
                13             -0.0
                14             -0.0
    Name: y, Length: 67, dtype: pint[meter][Float64] 1553.3522445768986 nanometer
    Population  ScattererID
    150 nm      0               0.0
                1               0.0
                2              -0.0
                3              -0.0
                4               0.0
                               ... 
    90 nm       10              0.0
                11              0.0
                12             -0.0
                13             -0.0
                14             -0.0
    Name: y, Length: 67, dtype: pint[meter][Float64] 1553.3522445768986 nanometer




.. GENERATED FROM PYTHON SOURCE LINES 145-146

Plot Raw Analog Signal

.. GENERATED FROM PYTHON SOURCE LINES 146-149

.. code-block:: Python

    results.analog.normalize_units(time_units='max', signal_units='max')
    results.analog.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_001.png
         :alt: limit of detection
         :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_002.png
         :alt: limit of detection
         :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x500 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 150-151

Plot Triggered Analog Signal Segments

.. GENERATED FROM PYTHON SOURCE LINES 151-153

.. code-block:: Python

    results.triggered_analog.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_003.png
         :alt: limit of detection
         :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_004.png
         :alt: limit of detection
         :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 1200x500 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 154-155

Plot Peak Features (Side vs Forward Height)

.. GENERATED FROM PYTHON SOURCE LINES 155-159

.. code-block:: Python

    results.peaks.plot(
        x=('side', 'Height'),
        y=('forward', 'Height')
    )



.. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_005.png
   :alt: Peaks properties
   :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <seaborn.axisgrid.JointGrid object at 0x7fd9cdfa3d50>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.982 seconds)


.. _sphx_glr_download_gallery_tutorials_limit_of_detection.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: limit_of_detection.ipynb <limit_of_detection.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: limit_of_detection.py <limit_of_detection.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: limit_of_detection.zip <limit_of_detection.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
