
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/extras/scatterer_distribution.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_extras_scatterer_distribution.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_extras_scatterer_distribution.py:


Scatterer Collection
====================

This script simulates a flow cytometer using the FlowCyPy library. It models light scattering from particles
detected by two detectors (Forward Scatter and Side Scatter) and visualizes the scattering intensities in a 2D hexbin plot.

Flow cytometry is used to analyze the physical and chemical properties of particles as they flow through a laser beam.

Steps in the Workflow:
----------------------
1. Define the flow parameters (e.g., speed, area, and total simulation time).
2. Create particle size and refractive index distributions.
3. Set up a laser source and detectors.
4. Simulate the flow cytometry experiment.
5. Visualize the scattering intensity in a 2D hexbin plot.

.. GENERATED FROM PYTHON SOURCE LINES 20-21

Import necessary libraries and modules

.. GENERATED FROM PYTHON SOURCE LINES 21-52

.. code-block:: Python

    from FlowCyPy import ScattererCollection
    from FlowCyPy import distribution, Population
    from FlowCyPy.units import nanometer, RIU, particle, milliliter
    import numpy as np

    # Set random seed for reproducibility
    np.random.seed(20)


    # Step 1: Define Particle Size and Refractive Index Distributions
    # ---------------------------------------------------------------
    # Two particle populations are defined with different sizes and refractive indices.
    scatterer_collection = ScattererCollection(medium_refractive_index=1.33 * RIU)

    population_0 = Population(
        name='EV',
        particle_count=2e+9 * particle / milliliter,
        diameter=distribution.RosinRammler(characteristic_property=50 * nanometer, spread=4.5),
        refractive_index=distribution.Normal(mean=1.39 * RIU, std_dev=0.05 * RIU)
    )

    population_1 = Population(
        name='LP',
        particle_count=1e+10 * particle / milliliter,
        diameter=distribution.RosinRammler(characteristic_property=200 * nanometer, spread=4.5),
        refractive_index=distribution.Normal(mean=1.45 * RIU, std_dev=0.05 * RIU)
    )

    scatterer_collection.add_population(population_0, population_1)

    scatterer_collection.plot()



.. image-sg:: /gallery/extras/images/sphx_glr_scatterer_distribution_001.png
   :alt: Scatterer Collection
   :srcset: /gallery/extras/images/sphx_glr_scatterer_distribution_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                Diameter     RefractiveIndex
    Population Index                                        
    EV         0      48.685861195822774  1.4164902505664154
               1       60.04961491675073  1.4638033424194599
               2       59.70261101290269  1.3788222846952922
               3       56.19815079476007     1.3449760451417
               4      23.966808222875194  1.4157881781025778
    ...                              ...                 ...
    LP         995    152.66216191682807  1.4709462214577693
               996    178.72433984883764   1.491502662311642
               997    141.20945290738908   1.411573873929729
               998     189.6250830362507  1.5166224845777578
               999     93.18506683374343  1.3575830026663274

    [2000 rows x 2 columns]

    <seaborn.axisgrid.JointGrid object at 0x7f871af30510>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.433 seconds)


.. _sphx_glr_download_gallery_extras_scatterer_distribution.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: scatterer_distribution.ipynb <scatterer_distribution.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: scatterer_distribution.py <scatterer_distribution.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: scatterer_distribution.zip <scatterer_distribution.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
