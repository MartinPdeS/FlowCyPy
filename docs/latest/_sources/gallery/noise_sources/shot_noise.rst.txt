
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/noise_sources/shot_noise.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_noise_sources_shot_noise.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_noise_sources_shot_noise.py:


Effect of Optical Power on Detector Signal
==========================================

This example demonstrates the effect of different optical power levels on a flow cytometer detector.
We initialize the detector, apply varying optical power levels, and visualize the resulting signals
and their distributions.

.. GENERATED FROM PYTHON SOURCE LINES 10-82



.. image-sg:: /gallery/noise_sources/images/sphx_glr_shot_noise_001.png
   :alt: Raw Signals at Different Optical Powers, Histogram of Raw Signals
   :srcset: /gallery/noise_sources/images/sphx_glr_shot_noise_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/FlowCyPy/FlowCyPy/docs/examples/noise_sources/shot_noise.py:72: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
      ax_signal.legend()






|

.. code-block:: Python


    import matplotlib.pyplot as plt
    from FlowCyPy.detector import Detector
    from FlowCyPy.units import watt, ohm, ampere, second, hertz, degree, AU, nanometer
    from FlowCyPy.signal_digitizer import SignalDigitizer

    from FlowCyPy import NoiseSetting

    NoiseSetting.include_noises = True
    NoiseSetting.include_shot_noise = True
    NoiseSetting.include_dark_current_noise = False
    NoiseSetting.include_thermal_noise = False
    NoiseSetting.include_RIN_noise = False

    # Define optical power levels
    optical_powers = [1e-9 * watt, 5e-9 * watt, 1e-8 * watt]  # Powers in watts

    signal_digitizer = SignalDigitizer(
        bit_depth='14bit',
        saturation_levels='auto',
        sampling_freq=1e6 * hertz,        # Sampling frequency
    )

    # Create a figure for signal visualization
    fig, (ax_signal, ax_hist) = plt.subplots(2, 1, figsize=(10, 6), sharex=False)

    # Loop over the optical power levels
    for optical_power in optical_powers:
        # Initialize the detector
        detector = Detector(
            name=f"{optical_power.magnitude:.1e} W",
            responsitivity=1 * ampere / watt,  # Responsitivity (current per power)
            resistance=50 * ohm,              # Load resistance
            numerical_aperture=0.2 * AU,      # Numerical aperture
            signal_digitizer=signal_digitizer,
            phi_angle=0 * degree              # Detector orientation angle
        )

        # Initialize the raw signal
        dataframe = detector.get_initialized_signal(run_time=200e-6 * second)

        # Add optical power to the raw signal
        detector._add_optical_power_to_raw_signal(
            signal=dataframe['Signal'],
            optical_power=optical_power,
            wavelength=1550 * nanometer
        )

        detector.capture_signal(dataframe['Signal'])

        # Plot the raw signal on the first axis
        ax_signal.step(
            dataframe.index,
            dataframe.Signal.pint.quantity.magnitude
        )

        # Plot the histogram of the raw signal
        ax_hist.hist(dataframe['Signal'], bins=50, alpha=0.6, label=detector.name)

    # Customize the axes
    ax_signal.set_title("Raw Signals at Different Optical Powers")
    ax_signal.set_ylabel("Signal Voltage (V)")
    ax_signal.legend()

    ax_hist.set_title("Histogram of Raw Signals")
    ax_hist.set_xlabel("Signal Voltage (V)")
    ax_hist.set_ylabel("Frequency")
    ax_hist.legend()

    # Show the plots
    plt.tight_layout()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.555 seconds)


.. _sphx_glr_download_gallery_noise_sources_shot_noise.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: shot_noise.ipynb <shot_noise.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: shot_noise.py <shot_noise.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: shot_noise.zip <shot_noise.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
