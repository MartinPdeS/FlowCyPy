
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_tutorials_workflow.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_workflow.py:


Flow Cytometry Simulation: Scattering Intensities with One Population
======================================================================

This tutorial demonstrates how to simulate a flow cytometry experiment using the FlowCyPy library.
The simulation involves configuring a flow setup, defining a single population of particles, and
analyzing scattering signals from two detectors to produce a 2D density plot of scattering intensities.

Overview:
---------
1. Configure the flow cell and particle population.
2. Define the laser source and detector parameters.
3. Simulate the flow cytometry experiment.
4. Analyze the generated signals and visualize results.

.. GENERATED FROM PYTHON SOURCE LINES 19-23

Step 0: Import Necessary Libraries
-----------------------------------
Here, we import the necessary libraries and units for the simulation. The units module helps us
define physical quantities like meters, seconds, and watts in a concise and consistent manner.

.. GENERATED FROM PYTHON SOURCE LINES 23-28

.. code-block:: Python


    import numpy as np
    from FlowCyPy import units









.. GENERATED FROM PYTHON SOURCE LINES 29-33

Step 1: Configure Noise Settings
---------------------------------
Noise settings are configured to simulate real-world imperfections. In this example, we include noise
globally but exclude specific types, such as shot noise and thermal noise.

.. GENERATED FROM PYTHON SOURCE LINES 33-44

.. code-block:: Python


    from FlowCyPy import NoiseSetting

    NoiseSetting.include_noises = True
    NoiseSetting.include_shot_noise = False
    NoiseSetting.include_thermal_noise = False
    NoiseSetting.include_dark_current_noise = False

    np.random.seed(3)  # Ensure reproducibility









.. GENERATED FROM PYTHON SOURCE LINES 45-49

Step 2: Configure the Laser Source
----------------------------------
The laser source generates light that interacts with the particles. Its parameters, like numerical
aperture and wavelength, affect how light scatters, governed by Mie theory.

.. GENERATED FROM PYTHON SOURCE LINES 49-59

.. code-block:: Python


    from FlowCyPy import GaussianBeam

    source = GaussianBeam(
        numerical_aperture=0.3 * units.AU,           # Numerical aperture
        wavelength=200 * units.nanometer,           # Wavelength
        optical_power=20 * units.milliwatt          # Optical power
    )









.. GENERATED FROM PYTHON SOURCE LINES 60-67

Step 3: Set Up the Flow Cell
----------------------------
The flow cell models the movement of particles in the cytometer. For example, the volume of fluid
passing through the cross-sectional area is calculated as:

.. math::
    \text{Flow Volume} = \text{Flow Speed} \times \text{Flow Area} \times \text{Run Time}

.. GENERATED FROM PYTHON SOURCE LINES 67-77

.. code-block:: Python


    from FlowCyPy import FlowCell

    flow_cell = FlowCell(
        source=source,
        flow_speed=7.56 * units.meter / units.second,  # Flow speed
        flow_area=(10 * units.micrometer) ** 2,       # Cross-sectional area
    )









.. GENERATED FROM PYTHON SOURCE LINES 78-85

Step 4: Define ScattererCollection and Population
-------------------------------------------------
The scatterer represents particles in the flow. The concentration of particles in the flow cell is
given by:

.. math::
    \text{Concentration} = \frac{\text{Number of Particles}}{\text{Volume of Flow}}

.. GENERATED FROM PYTHON SOURCE LINES 85-99

.. code-block:: Python


    from FlowCyPy import ScattererCollection
    from FlowCyPy.population import Exosome

    scatterer_collection = ScattererCollection(medium_refractive_index=1.33 * units.RIU)

    exosome = Exosome(particle_count=5e9 * units.particle / units.milliliter)

    # Add an Exosome population
    scatterer_collection.add_population(exosome)

    # Initialize the scatterer with the flow cell
    # scatterer_collection.plot(sampling=300 * units.particle)  # Visualize the particle population





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (Population(name='Exosome', refractive_index=Normal(1.390 RIU, 0.020 RIU), size=RR(70.000 nm, 2.000), particle_count=5000000000000.001 particle/l),)



.. GENERATED FROM PYTHON SOURCE LINES 100-104

Step 5: Define Detectors
------------------------
Detectors measure light intensity. Parameters like responsitivity define the conversion of optical
power to electronic signals, and saturation level represents the maximum signal they can handle.

.. GENERATED FROM PYTHON SOURCE LINES 104-134

.. code-block:: Python


    from FlowCyPy.detector import Detector
    from FlowCyPy.signal_digitizer import SignalDigitizer

    signal_digitizer = SignalDigitizer(
        bit_depth='14bit',
        saturation_levels='auto',
        sampling_freq=60 * units.megahertz,
    )

    detector_0 = Detector(
        name='forward',
        phi_angle=0 * units.degree,                  # Forward scatter angle
        numerical_aperture=1.2 * units.AU,
        responsitivity=1 * units.ampere / units.watt,
        signal_digitizer=signal_digitizer,
        resistance=50 * units.ohm,
        temperature=300 * units.kelvin
    )

    detector_1 = Detector(
        name='side',
        phi_angle=90 * units.degree,                 # Side scatter angle
        numerical_aperture=1.2 * units.AU,
        responsitivity=1 * units.ampere / units.watt,
        signal_digitizer=signal_digitizer,
        resistance=50 * units.ohm,
        temperature=300 * units.kelvin,
    )








.. GENERATED FROM PYTHON SOURCE LINES 135-142

Step 6: Simulate Flow Cytometry Experiment
------------------------------------------
The FlowCytometer combines all components to simulate scattering. The interaction between light
and particles follows Mie theory:

.. math::
    \sigma_s = \frac{2 \pi}{k} \sum_{n=1}^\infty (2n + 1) (\lvert a_n \rvert^2 + \lvert b_n \rvert^2)

.. GENERATED FROM PYTHON SOURCE LINES 142-158

.. code-block:: Python


    from FlowCyPy import FlowCytometer

    cytometer = FlowCytometer(
        scatterer_collection=scatterer_collection,
        detectors=[detector_0, detector_1],
        flow_cell=flow_cell,
        background_power=0.001 * units.milliwatt
    )

    experiment = cytometer.get_continous_acquisition(run_time=0.03 * units.millisecond)

    experiment.plot.signals()  # Visualize signals from detectors

    experiment.plot.coupling_distribution(equal_limits=True)  # Visualize signals from detectors




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_001.png
         :alt: workflow
         :srcset: /gallery/tutorials/images/sphx_glr_workflow_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_002.png
         :alt: workflow
         :srcset: /gallery/tutorials/images/sphx_glr_workflow_002.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 159-165

Step 7: Analyze Detected Signals
--------------------------------
# The MovingAverage algorithm detects peaks in signals by analyzing local maxima within a defined
# window size and threshold.
from FlowCyPy import EventCorrelator
from FlowCyPy import peak_locator

.. GENERATED FROM PYTHON SOURCE LINES 165-188

.. code-block:: Python


    # algorithm = peak_locator.MovingAverage(
    #     threshold=10 * units.microvolt,
    #     window_size=1 * units.microsecond,
    #     min_peak_distance=0.3 * units.microsecond
    # )

    # # Assign peak detection algorithm to detectors
    # detector_0.set_peak_locator(algorithm)
    # detector_1.set_peak_locator(algorithm)

    # # Analyze signal data
    # analyzer = EventCorrelator(cytometer=cytometer)
    # analyzer.run_analysis(compute_peak_area=False)

    # # %%
    # # Step 8: Visualize Coincidence and Density Plot
    # # ----------------------------------------------
    # # Coincidence analysis checks for simultaneous detection events across detectors, which are plotted
    # # as a 2D density graph to illustrate signal relationships between FSC and SSC.

    # analyzer.get_coincidence(margin=1e-9 * units.microsecond)  # Extract coincidences
    # analyzer.plot(log_plot=False)  # Generate a 2D density plot








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.184 seconds)


.. _sphx_glr_download_gallery_tutorials_workflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow.ipynb <workflow.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow.py <workflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow.zip <workflow.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
