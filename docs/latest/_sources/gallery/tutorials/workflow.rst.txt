
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_tutorials_workflow.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_workflow.py:


Workflow
========

This tutorial demonstrates how to simulate a flow cytometry experiment using the FlowCyPy library.
The simulation involves configuring a flow setup, defining a single population of particles, and
analyzing scattering signals from two detectors to produce a 2D density plot of scattering intensities.

Overview:
---------
1. Configure the flow cell and particle population.
2. Define the laser source and detector parameters.
3. Simulate the flow cytometry experiment.
4. Analyze the generated signals and visualize results.

.. GENERATED FROM PYTHON SOURCE LINES 19-23

Step 0: Import Necessary Libraries
-----------------------------------
Here, we import the necessary libraries and units for the simulation. The units module helps us
define physical quantities like meters, seconds, and watts in a concise and consistent manner.

.. GENERATED FROM PYTHON SOURCE LINES 23-28

.. code-block:: Python


    import numpy as np
    from FlowCyPy import units









.. GENERATED FROM PYTHON SOURCE LINES 29-33

Step 1: Configure Noise Settings
---------------------------------
Noise settings are configured to simulate real-world imperfections. In this example, we include noise
globally but exclude specific types, such as shot noise and thermal noise.

.. GENERATED FROM PYTHON SOURCE LINES 33-44

.. code-block:: Python


    from FlowCyPy import NoiseSetting

    NoiseSetting.include_noises = True
    NoiseSetting.include_shot_noise = False
    NoiseSetting.include_thermal_noise = False
    NoiseSetting.include_dark_current_noise = False

    np.random.seed(3)  # Ensure reproducibility









.. GENERATED FROM PYTHON SOURCE LINES 45-49

Step 2: Configure the Laser Source
----------------------------------
The laser source generates light that interacts with the particles. Its parameters, like numerical
aperture and wavelength, affect how light scatters, governed by Mie theory.

.. GENERATED FROM PYTHON SOURCE LINES 49-59

.. code-block:: Python


    from FlowCyPy import GaussianBeam

    source = GaussianBeam(
        numerical_aperture=0.3 * units.AU,           # Numerical aperture
        wavelength=200 * units.nanometer,           # Wavelength
        optical_power=20 * units.milliwatt          # Optical power
    )









.. GENERATED FROM PYTHON SOURCE LINES 60-67

Step 3: Set Up the Flow Cell
----------------------------
The flow cell models the movement of particles in the cytometer. For example, the volume of fluid
passing through the cross-sectional area is calculated as:

.. math::
    \text{Flow Volume} = \text{Flow Speed} \times \text{Flow Area} \times \text{Run Time}

.. GENERATED FROM PYTHON SOURCE LINES 67-77

.. code-block:: Python


    from FlowCyPy import FlowCell

    flow_cell = FlowCell(
        source=source,
        volume_flow=0.3 * units.microliter / units.second,  # Flow volume
        flow_area=(10 * units.micrometer) ** 2,       # Cross-sectional area
    )









.. GENERATED FROM PYTHON SOURCE LINES 78-85

Step 4: Define ScattererCollection and Population
-------------------------------------------------
The scatterer represents particles in the flow. The concentration of particles in the flow cell is
given by:

.. math::
    \text{Concentration} = \frac{\text{Number of Particles}}{\text{Volume of Flow}}

.. GENERATED FROM PYTHON SOURCE LINES 85-108

.. code-block:: Python


    from FlowCyPy import ScattererCollection
    from FlowCyPy.population import Exosome, Population, distribution

    scatterer_collection = ScattererCollection(medium_refractive_index=1.33 * units.RIU)

    exosome = Exosome(particle_count=5e9 * units.particle / units.milliliter)

    custom_population = Population(
        name='Pop 0',
        particle_count=5e9 * units.particle / units.milliliter,
        size=distribution.RosinRammler(characteristic_size=150 * units.nanometer, spread=30),
        refractive_index=distribution.Normal(mean=1.44 * units.RIU, std_dev=0.002 * units.RIU)
    )

    # Add an Exosome population
    scatterer_collection.add_population(exosome, custom_population)

    scatterer_collection.dilute(factor=4)

    # Initialize the scatterer with the flow cell
    scatterer_collection.plot()  # Visualize the particle population




.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_001.png
   :alt: workflow
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-113

Step 5: Define Detectors
------------------------
Detectors measure light intensity. Parameters like responsitivity define the conversion of optical
power to electronic signals, and saturation level represents the maximum signal they can handle.

.. GENERATED FROM PYTHON SOURCE LINES 113-141

.. code-block:: Python


    from FlowCyPy.detector import Detector
    from FlowCyPy.signal_digitizer import SignalDigitizer

    signal_digitizer = SignalDigitizer(
        bit_depth='14bit',
        saturation_levels='auto',
        sampling_rate=60 * units.megahertz,
    )

    detector_0 = Detector(
        name='forward',
        phi_angle=0 * units.degree,                  # Forward scatter angle
        numerical_aperture=1.2 * units.AU,
        responsitivity=1 * units.ampere / units.watt,
        resistance=50 * units.ohm,
        temperature=300 * units.kelvin
    )

    detector_1 = Detector(
        name='side',
        phi_angle=90 * units.degree,                 # Side scatter angle
        numerical_aperture=1.2 * units.AU,
        responsitivity=1 * units.ampere / units.watt,
        resistance=50 * units.ohm,
        temperature=300 * units.kelvin,
    )








.. GENERATED FROM PYTHON SOURCE LINES 142-149

Step 6: Simulate Flow Cytometry Experiment
------------------------------------------
The FlowCytometer combines all components to simulate scattering. The interaction between light
and particles follows Mie theory:

.. math::
    \sigma_s = \frac{2 \pi}{k} \sum_{n=1}^\infty (2n + 1) (\lvert a_n \rvert^2 + \lvert b_n \rvert^2)

.. GENERATED FROM PYTHON SOURCE LINES 149-167

.. code-block:: Python

    from FlowCyPy import FlowCytometer

    cytometer = FlowCytometer(
        scatterer_collection=scatterer_collection,
        signal_digitizer=signal_digitizer,
        detectors=[detector_0, detector_1],
        flow_cell=flow_cell,
        background_power=0.001 * units.milliwatt
    )

    # Run the flow cytometry simulation
    acquisition = cytometer.get_acquisition(run_time=0.2 * units.millisecond)

    _ = acquisition.scatterer.plot(
        x='side',
        y='forward'
    )




.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_002.png
   :alt: Scatterer Sampling Distribution
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PlaneWave(amplitude=<Quantity([10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863], 'volt / meter')>, wavelength=<Quantity([200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200], 'nanometer')>, polarization=Linear(element=array([[1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j]]))) 



    Sphere(source=PlaneWave(amplitude=<Quantity([10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863], 'volt / meter')>, wavelength=<Quantity([200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200], 'nanometer')>, polarization=Linear(element=array([[1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j]]))), diameter=<Quantity([ 42.95821956  51.62983092 101.37431576  28.59985199 101.95287922
      88.66192568 132.11694801  47.39346534  33.52242956  36.72082501
      92.85133776 128.2920135   76.68160468  56.81396117  40.71712073
      93.75530013 100.3988506   21.76266517  34.52652417  93.45380743
      96.12904246  43.02751433  40.06084894  52.54896804  61.63682858
      22.18534533  94.26549934  61.23091161  85.48922756  35.86100844
     128.327852    82.54101451  45.37674824 120.56898939  76.86242864
      94.85179289  15.10521714  16.74880178  81.56299056  42.19742364
      59.69700293  28.85441786 136.71614618  58.51030588  93.02623471
      19.41435354  56.51575493  17.7506706  102.78919175  53.77932005
      18.65374304  19.74700542  61.58041166  19.62174521  31.54367623
      53.00319183  58.09252071  65.49461766  68.90411515  47.81098107
      68.73788854  28.9531531   39.73911872  88.62811967  28.53391151
      35.19062858  36.93209561  56.56499964   1.91165384  12.2810106
      55.07613187  29.47978457  74.66997583  88.14842338  65.03362219
     138.61956852 147.17670437 139.26322377 140.75396206 122.18627542
     142.93824599 143.11342501 148.40868421 149.1570551  152.78650948
     147.98816216 154.04236719 146.59960326 151.56375404 148.9172112
     149.8872857  144.3376614  155.18939796 151.93244552 141.03280704
     148.70507219 158.74106496 135.77203341 144.98728656 151.50882724
     134.75658243 151.59363929 149.20104719 151.37802411 148.8906519
     155.24395664 145.78510587 149.21538879 135.93248508 148.92652822
     146.98377579 157.20311728 155.43969897 140.77116725 135.01221441
     140.08749841 142.48846436 151.29907493 148.79586501 148.6701739
     147.66532825 126.958908   146.55791372 159.93496511 152.72566468
     149.19337533 142.58975945 154.71693044 147.05733515 149.82618724
     142.76696591 145.45855917 145.75974999 146.59463732 132.17608991
     150.38451438 141.82943888 149.60840983 149.82962493 150.9018463
     144.77521065 144.77720048 151.72301722 146.48914754 141.26815994
     154.34807683 129.84039967 153.93781756 144.78163606 146.38467269], 'nanometer')>, property=<Quantity([1.3724517  1.42134383 1.38842667 1.37821654 1.41574272 1.35602614
     1.3827509  1.38026179 1.37825043 1.4056935  1.40336186 1.38725146
     1.37586257 1.38105435 1.40164633 1.42508146 1.38056292 1.39229954
     1.40646305 1.36974922 1.38695519 1.3834974  1.42451842 1.38734132
     1.37860524 1.4340605  1.38520226 1.39523117 1.39784826 1.40636366
     1.42857127 1.37784077 1.41989841 1.3857682  1.39042792 1.36972215
     1.37568617 1.37386318 1.38456128 1.40422368 1.39214831 1.38556986
     1.42126043 1.37863141 1.39173333 1.31978976 1.35675235 1.37691802
     1.39580369 1.40377828 1.394608   1.39336317 1.39523818 1.38688306
     1.39038036 1.41266495 1.37046693 1.39344443 1.37687465 1.40052823
     1.36864217 1.39193452 1.39351291 1.37623919 1.43092907 1.38794035
     1.39444909 1.37589715 1.42708017 1.40894717 1.43452148 1.42351056
     1.3871872  1.41160253 1.428269   1.44070091 1.43990115 1.44074678
     1.43868549 1.44323886 1.44048091 1.44090608 1.43828893 1.43992054
     1.43968696 1.43545551 1.44057531 1.43641039 1.43994243 1.43705211
     1.4440393  1.44065252 1.44172272 1.44183802 1.43735102 1.43543642
     1.43934084 1.4417943  1.44018207 1.44157086 1.44187327 1.43701521
     1.44057537 1.44393295 1.43885894 1.43594186 1.43953619 1.43907066
     1.44083676 1.43821519 1.44018143 1.43556516 1.44170793 1.44317373
     1.44259576 1.43696957 1.44063839 1.43403206 1.44056637 1.43987128
     1.43800841 1.44068759 1.44027603 1.44187901 1.44025462 1.44047005
     1.43610986 1.43768055 1.4390482  1.44059369 1.4399874  1.44300178
     1.43825968 1.43952074 1.44051016 1.43953701 1.44099116 1.43885887
     1.44284068 1.43936082 1.44223189 1.43993939 1.44298304 1.43720377
     1.4410336  1.43913485 1.4404628  1.44238561 1.43772181 1.43735594], 'refractive_index_unit')>, medium_property=<Quantity([1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33], 'refractive_index_unit')>) 



    Photodiode(NA=<Quantity([1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2], 'dimensionless')>, gamma_offset=<Quantity([0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0], 'degree')>, phi_offset=<Quantity([0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0], 'degree')>, mean_coupling=False, coherent=False, cache_NA=<Quantity([0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0], 'dimensionless')>, sampling=<Quantity([100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100], 'dimensionless')>, polarization_filter=<Quantity([nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan], 'degree')>, mode_number=array(['NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00'], dtype='<U4'), rotation=<Quantity([0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0], 'degree')>)
    PlaneWave(amplitude=<Quantity([10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863], 'volt / meter')>, wavelength=<Quantity([200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200], 'nanometer')>, polarization=Linear(element=array([[1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j]]))) 



    Sphere(source=PlaneWave(amplitude=<Quantity([10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863 10317184.54175863 10317184.54175863
     10317184.54175863 10317184.54175863], 'volt / meter')>, wavelength=<Quantity([200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200
     200 200 200 200 200 200], 'nanometer')>, polarization=Linear(element=array([[1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j],
           [1.+0.j, 0.+0.j]]))), diameter=<Quantity([ 42.95821956  51.62983092 101.37431576  28.59985199 101.95287922
      88.66192568 132.11694801  47.39346534  33.52242956  36.72082501
      92.85133776 128.2920135   76.68160468  56.81396117  40.71712073
      93.75530013 100.3988506   21.76266517  34.52652417  93.45380743
      96.12904246  43.02751433  40.06084894  52.54896804  61.63682858
      22.18534533  94.26549934  61.23091161  85.48922756  35.86100844
     128.327852    82.54101451  45.37674824 120.56898939  76.86242864
      94.85179289  15.10521714  16.74880178  81.56299056  42.19742364
      59.69700293  28.85441786 136.71614618  58.51030588  93.02623471
      19.41435354  56.51575493  17.7506706  102.78919175  53.77932005
      18.65374304  19.74700542  61.58041166  19.62174521  31.54367623
      53.00319183  58.09252071  65.49461766  68.90411515  47.81098107
      68.73788854  28.9531531   39.73911872  88.62811967  28.53391151
      35.19062858  36.93209561  56.56499964   1.91165384  12.2810106
      55.07613187  29.47978457  74.66997583  88.14842338  65.03362219
     138.61956852 147.17670437 139.26322377 140.75396206 122.18627542
     142.93824599 143.11342501 148.40868421 149.1570551  152.78650948
     147.98816216 154.04236719 146.59960326 151.56375404 148.9172112
     149.8872857  144.3376614  155.18939796 151.93244552 141.03280704
     148.70507219 158.74106496 135.77203341 144.98728656 151.50882724
     134.75658243 151.59363929 149.20104719 151.37802411 148.8906519
     155.24395664 145.78510587 149.21538879 135.93248508 148.92652822
     146.98377579 157.20311728 155.43969897 140.77116725 135.01221441
     140.08749841 142.48846436 151.29907493 148.79586501 148.6701739
     147.66532825 126.958908   146.55791372 159.93496511 152.72566468
     149.19337533 142.58975945 154.71693044 147.05733515 149.82618724
     142.76696591 145.45855917 145.75974999 146.59463732 132.17608991
     150.38451438 141.82943888 149.60840983 149.82962493 150.9018463
     144.77521065 144.77720048 151.72301722 146.48914754 141.26815994
     154.34807683 129.84039967 153.93781756 144.78163606 146.38467269], 'nanometer')>, property=<Quantity([1.3724517  1.42134383 1.38842667 1.37821654 1.41574272 1.35602614
     1.3827509  1.38026179 1.37825043 1.4056935  1.40336186 1.38725146
     1.37586257 1.38105435 1.40164633 1.42508146 1.38056292 1.39229954
     1.40646305 1.36974922 1.38695519 1.3834974  1.42451842 1.38734132
     1.37860524 1.4340605  1.38520226 1.39523117 1.39784826 1.40636366
     1.42857127 1.37784077 1.41989841 1.3857682  1.39042792 1.36972215
     1.37568617 1.37386318 1.38456128 1.40422368 1.39214831 1.38556986
     1.42126043 1.37863141 1.39173333 1.31978976 1.35675235 1.37691802
     1.39580369 1.40377828 1.394608   1.39336317 1.39523818 1.38688306
     1.39038036 1.41266495 1.37046693 1.39344443 1.37687465 1.40052823
     1.36864217 1.39193452 1.39351291 1.37623919 1.43092907 1.38794035
     1.39444909 1.37589715 1.42708017 1.40894717 1.43452148 1.42351056
     1.3871872  1.41160253 1.428269   1.44070091 1.43990115 1.44074678
     1.43868549 1.44323886 1.44048091 1.44090608 1.43828893 1.43992054
     1.43968696 1.43545551 1.44057531 1.43641039 1.43994243 1.43705211
     1.4440393  1.44065252 1.44172272 1.44183802 1.43735102 1.43543642
     1.43934084 1.4417943  1.44018207 1.44157086 1.44187327 1.43701521
     1.44057537 1.44393295 1.43885894 1.43594186 1.43953619 1.43907066
     1.44083676 1.43821519 1.44018143 1.43556516 1.44170793 1.44317373
     1.44259576 1.43696957 1.44063839 1.43403206 1.44056637 1.43987128
     1.43800841 1.44068759 1.44027603 1.44187901 1.44025462 1.44047005
     1.43610986 1.43768055 1.4390482  1.44059369 1.4399874  1.44300178
     1.43825968 1.43952074 1.44051016 1.43953701 1.44099116 1.43885887
     1.44284068 1.43936082 1.44223189 1.43993939 1.44298304 1.43720377
     1.4410336  1.43913485 1.4404628  1.44238561 1.43772181 1.43735594], 'refractive_index_unit')>, medium_property=<Quantity([1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33
     1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33 1.33], 'refractive_index_unit')>) 



    Photodiode(NA=<Quantity([1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2 1.2
     1.2 1.2 1.2 1.2 1.2 1.2], 'dimensionless')>, gamma_offset=<Quantity([0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0], 'degree')>, phi_offset=<Quantity([90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
     90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
     90 90 90 90 90 90], 'degree')>, mean_coupling=False, coherent=False, cache_NA=<Quantity([0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0], 'dimensionless')>, sampling=<Quantity([100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
     100 100 100 100 100 100], 'dimensionless')>, polarization_filter=<Quantity([nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan
     nan nan nan nan nan nan], 'degree')>, mode_number=array(['NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00',
           'NC00', 'NC00', 'NC00', 'NC00', 'NC00', 'NC00'], dtype='<U4'), rotation=<Quantity([0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0], 'degree')>)




.. GENERATED FROM PYTHON SOURCE LINES 168-169

Visualize the scatter signals from both detectors

.. GENERATED FROM PYTHON SOURCE LINES 169-171

.. code-block:: Python

    acquisition.analog.plot()




.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_003.png
   :alt: workflow
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 172-176

Step 7: Analyze Detected Signals
--------------------------------
The Peak algorithm detects peaks in signals by analyzing local maxima within a defined
window size and threshold.

.. GENERATED FROM PYTHON SOURCE LINES 176-187

.. code-block:: Python

    triggered_acquisition = acquisition.run_triggering(
        threshold=0.2 * units.millivolt,
        trigger_detector_name='forward',
        max_triggers=35,
        pre_buffer=64,
        post_buffer=64
    )

    triggered_acquisition.analog.plot()





.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_004.png
   :alt: workflow
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 188-189

Getting and plotting the extracted peaks.

.. GENERATED FROM PYTHON SOURCE LINES 189-201

.. code-block:: Python

    from FlowCyPy import peak_locator
    # peak_locator = peak_locator.ScipyPeakLocator(height=10 * units.bit_bins, padding_value=-1)
    peak_algorithm = peak_locator.BasicPeakLocator()

    peaks = triggered_acquisition.detect_peaks(peak_algorithm)

    peaks.plot(
        feature='Height',
        x_detector='side',
        y_detector='forward'
    )




.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_005.png
   :alt: Peaks properties
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <seaborn.axisgrid.JointGrid object at 0x7fb6f1d8be10>



.. GENERATED FROM PYTHON SOURCE LINES 202-203

Step 8: Classifying the collected dataset

.. GENERATED FROM PYTHON SOURCE LINES 203-217

.. code-block:: Python

    from FlowCyPy.classifier import KmeansClassifier

    classifier = KmeansClassifier(number_of_cluster=2)

    data = classifier.run(
        dataframe=peaks.unstack('Detector'),
        features=['Height'],
        detectors=['side', 'forward']
    )

    _ = data.plot(
        feature='Height',
        x_detector='side',
        y_detector='forward'
    )


.. image-sg:: /gallery/tutorials/images/sphx_glr_workflow_006.png
   :alt: Event classification
   :srcset: /gallery/tutorials/images/sphx_glr_workflow_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/FlowCyPy/dataframe_subclass.py:185: PerformanceWarning: indexing past lexsort depth may impact performance.
      x=temp[(feature, x_detector)].values.squeeze(),
    /opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/FlowCyPy/dataframe_subclass.py:186: PerformanceWarning: indexing past lexsort depth may impact performance.
      y=temp[(feature, y_detector)].values.squeeze(),





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.543 seconds)


.. _sphx_glr_download_gallery_tutorials_workflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow.ipynb <workflow.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow.py <workflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow.zip <workflow.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
