
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/coupling_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_tutorials_coupling_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_coupling_model.py:


Workflow
========

This tutorial demonstrates how to simulate a flow cytometry experiment using the FlowCyPy library.
The simulation involves configuring a flow setup, defining a single population of particles, and
analyzing scattering signals from two detectors to produce a 2D density plot of scattering intensities.

Overview:
---------
1. Configure the flow cell and particle population.
2. Define the laser source and detector parameters.
3. Simulate the flow cytometry experiment.
4. Analyze the generated signals and visualize results.

.. GENERATED FROM PYTHON SOURCE LINES 19-23

Step 0: Import Necessary Libraries
-----------------------------------
Here, we import the necessary libraries and units for the simulation. The units module helps us
define physical quantities like meters, seconds, and watts in a concise and consistent manner.

.. GENERATED FROM PYTHON SOURCE LINES 23-96

.. code-block:: Python


    from FlowCyPy import units
    from FlowCyPy import ScattererCollection, FlowCell
    from FlowCyPy.population import Exosome, HDL
    from FlowCyPy import GaussianBeam, OptoElectronics, SignalDigitizer, PMT, TransimpedanceAmplifier
    from FlowCyPy import Fluidics


    source = GaussianBeam(
        numerical_aperture=0.3 * units.AU,
        wavelength=200 * units.nanometer,
        optical_power=20 * units.milliwatt
    )

    flow_cell = FlowCell(
        sample_volume_flow=0.02 * units.microliter / units.second,
        sheath_volume_flow=0.1 * units.microliter / units.second,
        width=20 * units.micrometer,
        height=10 * units.micrometer,
    )

    scatterer_collection = ScattererCollection(medium_refractive_index=1.33 * units.RIU)

    # Add an Exosome and HDL population
    scatterer_collection.add_population(
        Exosome(particle_count=5e9 * units.particle / units.milliliter),
        HDL(particle_count=5e9 * units.particle / units.milliliter)
    )

    scatterer_collection.dilute(factor=0.1)

    fluidics = Fluidics(
        scatterer_collection=scatterer_collection,
        flow_cell=flow_cell
    )


    event_dataframe = fluidics.generate_event_dataframe(run_time=3.5 * units.millisecond)  # Visualize the particle population

    event_dataframe.plot(x='Diameter', bins='auto')

    digitizer = SignalDigitizer(
        bit_depth='14bit',
        saturation_levels='auto',
        sampling_rate=60 * units.megahertz,
    )

    detector_0 = PMT(name='forward', phi_angle=0 * units.degree, numerical_aperture=0.3 * units.AU)

    detector_1 = PMT(name='side', phi_angle=90 * units.degree, numerical_aperture=0.3 * units.AU)

    amplifier = TransimpedanceAmplifier(
        gain=100 * units.volt / units.ampere,
        bandwidth = 10 * units.megahertz
    )

    opto_electronics = OptoElectronics(
        detectors=[detector_0, detector_1],
        digitizer=digitizer,
        source=source,
        amplifier=amplifier
    )

    event_dataframe = opto_electronics.model_event(
        event_dataframe=event_dataframe,
        compute_cross_section=True
    )

    event_dataframe.plot(
        x='side',
        y='forward',
        z='Csca'
    )



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/tutorials/images/sphx_glr_coupling_model_001.png
         :alt: Distribution of Diameter
         :srcset: /gallery/tutorials/images/sphx_glr_coupling_model_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/tutorials/images/sphx_glr_coupling_model_002.png
         :alt: Scatterer Sampling Distribution
         :srcset: /gallery/tutorials/images/sphx_glr_coupling_model_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/FlowCyPy/source.py:269: UserWarning: Transverse distribution of particle flow exceed the waist of the source
      warnings.warn('Transverse distribution of particle flow exceed the waist of the source')
    /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/FlowCyPy/source.py:269: UserWarning: Transverse distribution of particle flow exceed the waist of the source
      warnings.warn('Transverse distribution of particle flow exceed the waist of the source')

    <Figure size 800x800 with 1 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.417 seconds)


.. _sphx_glr_download_gallery_tutorials_coupling_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: coupling_model.ipynb <coupling_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: coupling_model.py <coupling_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: coupling_model.zip <coupling_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
