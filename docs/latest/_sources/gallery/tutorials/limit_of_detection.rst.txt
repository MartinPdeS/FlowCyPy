
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/limit_of_detection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_tutorials_limit_of_detection.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_limit_of_detection.py:


Limit of Detection
==================

This example simulates the detection of small nanoparticles (90–150 nm diameter)
in a flow cytometry setup using a dual-detector configuration (side and forward scatter).
The simulation includes noise models, realistic fluidics, analog signal conditioning,
digitization, triggering, and peak detection.

The main goal is to evaluate whether such particles produce detectable and distinguishable
scatter signals in the presence of system noise and fluidic variability.

.. GENERATED FROM PYTHON SOURCE LINES 15-40

.. code-block:: Python

    import numpy as np
    from TypedUnit import ureg

    from FlowCyPy import FlowCytometer, SimulationSettings
    from FlowCyPy.fluidics import (
        FlowCell,
        Fluidics,
        ScattererCollection,
        distribution,
        population,
    )
    from FlowCyPy.opto_electronics import (
        Detector,
        OptoElectronics,
        TransimpedanceAmplifier,
        source,
    )
    from FlowCyPy.signal_processing import (
        Digitizer,
        SignalProcessing,
        circuits,
        peak_locator,
        triggering_system,
    )








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Simulation Configuration

.. GENERATED FROM PYTHON SOURCE LINES 42-52

.. code-block:: Python

    SimulationSettings.include_noises = True
    SimulationSettings.include_shot_noise = True
    SimulationSettings.include_source_noise = True
    SimulationSettings.include_dark_current_noise = True
    SimulationSettings.assume_perfect_hydrodynamic_focusing = True
    SimulationSettings.evenly_spaced_events = True
    SimulationSettings.sorted_population = True

    np.random.seed(3)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Optical Source

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: Python

    source = source.GaussianBeam(
        numerical_aperture=0.1 * ureg.AU,
        wavelength=488 * ureg.nanometer,
        optical_power=200 * ureg.milliwatt,
    )








.. GENERATED FROM PYTHON SOURCE LINES 61-62

Flow Cell Configuration

.. GENERATED FROM PYTHON SOURCE LINES 62-69

.. code-block:: Python

    flow_cell = FlowCell(
        sample_volume_flow=0.02 * ureg.microliter / ureg.second,
        sheath_volume_flow=0.1 * ureg.microliter / ureg.second,
        width=20 * ureg.micrometer,
        height=10 * ureg.micrometer,
    )








.. GENERATED FROM PYTHON SOURCE LINES 70-71

Define Scatterer Populations (90–150 nm spheres)

.. GENERATED FROM PYTHON SOURCE LINES 71-82

.. code-block:: Python

    scatterer_collection = ScattererCollection(medium_refractive_index=1.33 * ureg.RIU)

    for size in [150, 130, 110, 90]:
        pop = population.Sphere(
            name=f"{size} nm",
            particle_count=20 * ureg.particle,
            diameter=distribution.Delta(position=size * ureg.nanometer),
            refractive_index=distribution.Delta(position=1.39 * ureg.RIU),
        )
        scatterer_collection.add_population(pop)








.. GENERATED FROM PYTHON SOURCE LINES 83-84

Fluidics Subsystem

.. GENERATED FROM PYTHON SOURCE LINES 84-86

.. code-block:: Python

    fluidics = Fluidics(scatterer_collection=scatterer_collection, flow_cell=flow_cell)








.. GENERATED FROM PYTHON SOURCE LINES 87-88

Signal Digitizer

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: Python

    digitizer = Digitizer(
        bit_depth="14bit", saturation_levels="auto", sampling_rate=60 * ureg.megahertz
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-94

Detectors

.. GENERATED FROM PYTHON SOURCE LINES 94-110

.. code-block:: Python

    detector_side = Detector(
        name="side",
        phi_angle=90 * ureg.degree,
        numerical_aperture=0.2 * ureg.AU,
        responsivity=1 * ureg.ampere / ureg.watt,
        dark_current=0.001 * ureg.milliampere,
    )

    detector_forward = Detector(
        name="forward",
        phi_angle=0 * ureg.degree,
        numerical_aperture=0.2 * ureg.AU,
        responsivity=1 * ureg.ampere / ureg.watt,
        dark_current=0.001 * ureg.milliampere,
    )








.. GENERATED FROM PYTHON SOURCE LINES 111-112

Amplifier and Opto-Electronics

.. GENERATED FROM PYTHON SOURCE LINES 112-120

.. code-block:: Python

    amplifier = TransimpedanceAmplifier(
        gain=10000 * ureg.volt / ureg.ampere, bandwidth=10 * ureg.megahertz
    )

    opto_electronics = OptoElectronics(
        detectors=[detector_side, detector_forward], source=source, amplifier=amplifier
    )








.. GENERATED FROM PYTHON SOURCE LINES 121-122

Analog Processing Pipeline

.. GENERATED FROM PYTHON SOURCE LINES 122-127

.. code-block:: Python

    analog_processing = [
        circuits.BaselineRestorator(window_size=10 * ureg.microsecond),
        circuits.BesselLowPass(cutoff=1 * ureg.megahertz, order=4, gain=2),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 128-129

Triggering and Peak Detection

.. GENERATED FROM PYTHON SOURCE LINES 129-144

.. code-block:: Python

    triggering_system = triggering_system.DynamicWindow(
        trigger_detector_name="forward",
        threshold=0.4 * ureg.millivolt,
        max_triggers=-1,
        pre_buffer=64,
        post_buffer=64,
    )

    signal_processing = SignalProcessing(
        digitizer=digitizer,
        analog_processing=analog_processing,
        triggering_system=triggering_system,
        peak_algorithm=peak_locator.GlobalPeakLocator(),
    )








.. GENERATED FROM PYTHON SOURCE LINES 145-154

.. code-block:: Python

    cytometer = FlowCytometer(
        opto_electronics=opto_electronics,
        fluidics=fluidics,
        signal_processing=signal_processing,
        background_power=0.0001 * ureg.milliwatt,
    )

    run_record = cytometer.run(run_time=1.0 * ureg.millisecond)








.. GENERATED FROM PYTHON SOURCE LINES 155-156

Plot Raw Analog Signal

.. GENERATED FROM PYTHON SOURCE LINES 156-158

.. code-block:: Python

    run_record.plot_analog()




.. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_001.png
   :alt: limit of detection
   :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 800x500 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 159-160

Plot Triggered Analog Signal Segments

.. GENERATED FROM PYTHON SOURCE LINES 160-162

.. code-block:: Python

    run_record.plot_digital()




.. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_002.png
   :alt: limit of detection
   :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 800x500 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 163-164

Plot Peak Features (Side vs Forward Height)

.. GENERATED FROM PYTHON SOURCE LINES 164-165

.. code-block:: Python

    run_record.peaks.plot(x=("side", "Height"), y=("forward", "Height"))



.. image-sg:: /gallery/tutorials/images/sphx_glr_limit_of_detection_003.png
   :alt: Peaks properties
   :srcset: /gallery/tutorials/images/sphx_glr_limit_of_detection_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 600x600 with 3 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.952 seconds)


.. _sphx_glr_download_gallery_tutorials_limit_of_detection.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: limit_of_detection.ipynb <limit_of_detection.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: limit_of_detection.py <limit_of_detection.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: limit_of_detection.zip <limit_of_detection.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
