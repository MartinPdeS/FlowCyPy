
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/density_plots/2_populations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_density_plots_2_populations.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_density_plots_2_populations.py:


Flow Cytometry Simulation [2 populations] Density Plot of Scattering Intensities
================================================================================

This example simulates a flow cytometer experiment using the FlowCyPy library,
analyzes pulse signals from two detectors, and generates a 2D density plot of the scattering intensities.

Steps:
1. Set flow parameters and particle size distributions.
2. Set up the laser source and detectors.
3. Simulate the flow cytometry experiment.
4. Analyze pulse signals and generate a 2D density plot.

.. GENERATED FROM PYTHON SOURCE LINES 14-51

.. code-block:: Python


    # Import necessary libraries and modules
    import numpy as np
    from FlowCyPy import FlowCytometer, Scatterer, EventCorrelator, Detector, GaussianBeam, FlowCell
    from FlowCyPy import peak_locator
    from FlowCyPy.units import particle, milliliter, nanometer, RIU, second, micrometer, millisecond, meter
    from FlowCyPy.units import degree, watt, ampere, millivolt, ohm, kelvin, milliampere, megahertz, microvolt
    from FlowCyPy.units import microsecond
    from FlowCyPy.units import milliwatt, AU
    from FlowCyPy import NoiseSetting
    from FlowCyPy.population import Exosome, HDL

    NoiseSetting.include_noises = False

    # Set random seed for reproducibility
    np.random.seed(3)

    # Step 1: Define Flow Parameters
    flow_cell = FlowCell(
        flow_speed=7.56 * meter / second,      # Flow speed: 7.56 meters per second
        flow_area=(10 * micrometer) ** 2,      # Flow area: 10 x 10 micrometers
        run_time=.2 * millisecond             # Total simulation time: 0.3 milliseconds
    )

    # Step 2: Create Populations (Extracellular Vesicles and Liposomes)
    scatterer = Scatterer(medium_refractive_index=1.33 * RIU)  # Medium refractive index: 1.33

    scatterer.add_population(Exosome, particle_count=3e+8 * particle / milliliter)
    scatterer.add_population(HDL, particle_count=3e+8 * particle / milliliter)

    # Initialize scatterer and link it to the flow cell
    scatterer.initialize(flow_cell=flow_cell)

    # Print and plot properties of the populations
    scatterer._log_properties()
    scatterer.plot()




.. image-sg:: /gallery/density_plots/images/sphx_glr_2_populations_001.png
   :alt: 2 populations
   :srcset: /gallery/density_plots/images/sphx_glr_2_populations_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-53

Step 4: Set up the Laser GaussianBeam

.. GENERATED FROM PYTHON SOURCE LINES 53-108

.. code-block:: Python

    source = GaussianBeam(
        numerical_aperture=0.3 * AU,             # Numerical aperture of the laser: 0.3
        wavelength=488 * nanometer,              # Laser wavelength: 800 nanometers
        optical_power=100 * milliwatt             # Laser optical power: 10 milliwatts
    )

    source.print_properties()  # Print the laser source properties

    # Step 5: Configure Detectors
    # Side scatter detector
    detector_0 = Detector(
        name='side',                             # Detector name: Side scatter detector
        phi_angle=90 * degree,                   # Angle: 90 degrees (Side Scatter)
        numerical_aperture=.2 * AU,             # Numerical aperture: 1.2
        responsitivity=1 * ampere / watt,        # Responsitivity: 1 ampere per watt
        sampling_freq=60 * megahertz,            # Sampling frequency: 60 MHz
        saturation_level=0.04 * millivolt,          # Saturation level: 2 millivolts
        # n_bins='16bit',                          # Number of bins: 14-bit resolution
        resistance=50 * ohm,                     # Detector resistance: 50 ohms
        dark_current=0.1 * milliampere,          # Dark current: 0.1 milliamps
        temperature=300 * kelvin                 # Operating temperature: 300 Kelvin
    )

    # Forward scatter detector
    detector_1 = Detector(
        name='forward',                          # Detector name: Forward scatter detector
        phi_angle=0 * degree,                    # Angle: 0 degrees (Forward Scatter)
        numerical_aperture=.2 * AU,             # Numerical aperture: 1.2
        responsitivity=1 * ampere / watt,        # Responsitivity: 1 ampere per watt
        sampling_freq=60 * megahertz,            # Sampling frequency: 60 MHz
        saturation_level=0.04 * millivolt,          # Saturation level: 2 millivolts
        # n_bins='16bit',                          # Number of bins: 14-bit resolution
        resistance=50 * ohm,                     # Detector resistance: 50 ohms
        dark_current=0.1 * milliampere,          # Dark current: 0.1 milliamps
        temperature=300 * kelvin                 # Operating temperature: 300 Kelvin
    )


    detector_1.print_properties()  # Print the properties of the forward scatter detector

    # Step 6: Simulate Flow Cytometry Experiment
    cytometer = FlowCytometer(
        coupling_mechanism='mie',                # Scattering mechanism: Mie scattering
        source=source,                           # Laser source used in the experiment
        scatterer=scatterer,                     # Populations used in the experiment
        background_power=0.0 * milliwatt,
        detectors=[detector_0, detector_1]       # List of detectors: Side scatter and Forward scatter
    )

    # Run the simulation of pulse signals
    cytometer.simulate_pulse()

    # Plot the results from both detectors
    cytometer.plot()




.. image-sg:: /gallery/density_plots/images/sphx_glr_2_populations_002.png
   :alt: 2 populations
   :srcset: /gallery/density_plots/images/sphx_glr_2_populations_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    GaussianBeam [] Properties
    +------------+---------+
    | Property   | Value   |
    +============+=========+
    +------------+---------+

    Detector [forward] Properties
    +--------------------+----------+
    | Property           | Value    |
    +====================+==========+
    | Sampling frequency | 60.0 MHz |
    +--------------------+----------+
    | Phi angle          | 0.0 deg  |
    +--------------------+----------+
    | Gamma angle        | 0.0 deg  |
    +--------------------+----------+
    | Numerical aperture | 0.2      |
    +--------------------+----------+
    | Responsitivity     | 1.0 A/W  |
    +--------------------+----------+
    | Saturation Level   | 40.0 µV  |
    +--------------------+----------+
    | Dark Current       | 100.0 µA |
    +--------------------+----------+
    | Resistance         | 50.0 Ω   |
    +--------------------+----------+
    | Temperature        | 300.0 K  |
    +--------------------+----------+
    | N Bins             |          |
    +--------------------+----------+




.. GENERATED FROM PYTHON SOURCE LINES 109-110

Step 5: Analyzing Pulse Signals

.. GENERATED FROM PYTHON SOURCE LINES 110-126

.. code-block:: Python

    algorithm = peak_locator.MovingAverage(
        threshold=0.1e-20 * microvolt,       # Signal threshold: 0.1 mV
        window_size=1 * microsecond,         # Moving average window size: 1 µs
        min_peak_distance=0.1 * microsecond  # Minimum distance between peaks: 0.3 µs
    )

    detector_0.set_peak_locator(algorithm)
    detector_1.set_peak_locator(algorithm)

    cytometer.plot(add_peak_locator=True)

    analyzer = EventCorrelator(cytometer=cytometer)

    # Run the pulse signal analysis without computing peak area
    analyzer.run_analysis(compute_peak_area=False)




.. image-sg:: /gallery/density_plots/images/sphx_glr_2_populations_003.png
   :alt: 2 populations
   :srcset: /gallery/density_plots/images/sphx_glr_2_populations_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 127-128

Step 8: Extract and Plot Coincidence Data

.. GENERATED FROM PYTHON SOURCE LINES 128-132

.. code-block:: Python

    analyzer.get_coincidence(margin=0.1 * microsecond)  # Coincidence data with 0.1 µs margin

    # Plot the 2D density plot of scattering intensities
    analyzer.plot(log_plot=False)  # Plot with a linear scale (log_plot=False)



.. image-sg:: /gallery/density_plots/images/sphx_glr_2_populations_004.png
   :alt: 2 populations
   :srcset: /gallery/density_plots/images/sphx_glr_2_populations_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.183 seconds)


.. _sphx_glr_download_gallery_density_plots_2_populations.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 2_populations.ipynb <2_populations.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 2_populations.py <2_populations.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 2_populations.zip <2_populations.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
